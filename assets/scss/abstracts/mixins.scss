// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Clearfix
@mixin clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/// Convert px size to rem
/// @author Rhys Williams
/// @param {String} $size - size in pixels (include px)
@mixin fontSize($size) {
  font-size: $size; //Fallback in px
  font-size: rem($size);
}

/**
 * Mixin for CSS3 Flexbox
 *
 * @param flex-direction
 * @param justify-content
 * @param (bool) inline
 */

@mixin flexbox($direction, $justify, $inline: false) {
  @if ($inline) {
    display: inline-flex;
  } @else {
    display: flex;
  }

  flex-direction: $direction;
  justify-content: $justify;
}

@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .ar-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin absolute-fill() {
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/
@mixin object-fit($fit: fill, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;
  @if $position {
    -o-object-position: $position;
    object-position: $position;
    font-family: "object-fit: #{$fit}; object-position: #{$position}";
  } @else {
    font-family: "object-fit: #{$fit}";
  }
}

@mixin centre-content($vertical: true, $horizontal: true) {
  @if $vertical or $horizontal {
    position: absolute;
  }

  @if $vertical {
    top: 50%;
    transform: translateY(-50%);
  }

  @if $horizontal {
    left: 50%;
    transform: translateX(-50%);
  }

  @if $vertical and $horizontal {
    transform: translate(-50%, -50%);
  }
}

@mixin vertical-gradient($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 60%);
  background-image: -moz-linear-gradient(
    top,
    $startColor,
    $endColor
  ); // FF 3.6+
  background-image: -webkit-gradient(
    linear,
    0 0,
    0 100%,
    from($startColor),
    to($endColor)
  ); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(
    top,
    $startColor,
    $endColor
  ); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(
    top,
    $startColor,
    $endColor
  ); // Opera 11.10
  background-image: linear-gradient(
    to bottom,
    $startColor,
    $endColor
  ); // Standard, IE10
  background-repeat: repeat-x;
}

@mixin diagonal-gradient($startColor: #555, $endColor: #333) {
  /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/$endColor+21,e79d32+100 */
  background: $endColor; /* Old browsers */
  background: -moz-linear-gradient(
    45deg,
    $endColor 40%,
    $startColor 100%
  ); /* FF3.6-15 */
  background: -webkit-linear-gradient(
    45deg,
    $endColor 40%,
    $startColor 100%
  ); /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(
    45deg,
    $endColor 40%,
    $startColor 100%
  ); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
}
